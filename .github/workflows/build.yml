name: Build

on:
    push:
        branches-ignore:
            - 'dependabot/**'
    pull_request: ~
    release:
        types: [created]
    schedule:
        -
            cron: "0 1 * * 6" # Run at 1am every Saturday
    workflow_dispatch: ~

jobs:
    tests:
        runs-on: ubuntu-22.04
        name: "Sylius ${{ matrix.sylius }}, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}, MySQL ${{ matrix.mariadb }}"
        
        services:
            mariadb:
                image: mariadb:${{ matrix.mariadb }}
                ports:
                    - '3306:3306'
                env:
                    MYSQL_USER: user
                    MYSQL_PASSWORD: password
                    MYSQL_DATABASE: test
                    MYSQL_ROOT_PASSWORD: nopassword
                options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

        strategy:
            fail-fast: false
            matrix:
#                php: ["8.2"]
                php: ["8.4", "8.3", "8.2", "8.1"]
#                symfony: ["^6.4"]
                symfony: ["^5.4", "^6.4", "^7.0"]
#                sylius: ["~1.13.0"]
                sylius: ["~1.11.0", "~1.12.0", "~1.13.0", "~1.14.0", "~2.0.0"]
#                node: ["12.x"]
                mariadb: ["10.11"]

                exclude:
                    -
                        sylius: "~1.11.0"
                        symfony: "^6.4"
                    -
                        sylius: "~1.11.0"
                        symfony: "^7.0"
                    -
                        sylius: "~1.11.0"
                        php: "8.4"
                    -
                        sylius: "~1.12.0"
                        symfony: "^7.0"
                    -
                        sylius: "~1.12.0"
                        php: "8.4"
                    -
                        sylius: "~1.13.0"
                        symfony: "^7.0"
                    -
                        sylius: "~1.13.0"
                        php: "8.4"
                    -
                        sylius: "~1.14.0"
                        symfony: "^7.0"
                    -
                        sylius: "~1.14.0"
                        symfony: "^5.4"
                    -
                        sylius: "~2.0.0"
                        symfony: "^5.4"
                    -
                        sylius: "~2.0.0"
                        php: "8.1"


        env:
            APP_ENV: test
            DATABASE_URL: "mysql://root:nopassword@127.0.0.1/sylius?serverVersion=mariadb-${{ matrix.mariadb }}.0"

        steps:
            -
                uses: actions/checkout@v4

            -
                name: Setup PHP
                uses: shivammathur/setup-php@v2
                with:
                    php-version: "${{ matrix.php }}"
                    extensions: intl
                    tools: symfony
                    coverage: none

#            -
#                name: Setup Node
#                uses: actions/setup-node@v1
#                with:
#                    node-version: "${{ matrix.node }}"

            -
                name: Shutdown default MySQL
                run: sudo service mysql stop


            -
                name: Output PHP version for Symfony CLI
                run: php -v | head -n 1 | awk '{ print $2 }' > .php-version
#
#            -
#                name: Install certificates
#                run: symfony server:ca:install
#
# Not used
#            -
#                name: Run Chrome Headless
#                run: google-chrome-stable --enable-automation --disable-background-networking --no-default-browser-check --no-first-run --disable-popup-blocking --disable-default-apps --allow-insecure-localhost --disable-translate --disable-extensions --no-sandbox --enable-features=Metal --headless --remote-debugging-port=9222 --window-size=2880,1800 --proxy-server='direct://' --proxy-bypass-list='*' http://127.0.0.1 > /dev/null 2>&1 &
#
#            -
#                name: Run webserver
#                run: (cd tests/Application && symfony server:start --port=8080 --dir=public --daemon)

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

            -
                name: Cache Composer
                uses: actions/cache@v4
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.json **/composer.lock') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-composer-

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: |
                    composer global config --no-plugins allow-plugins.symfony/flex true
                    composer global require --no-progress --no-scripts --no-plugins "symfony/flex:^1.10"
                    composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Restrict Sylius version
                if: matrix.sylius != ''
                run: composer require "sylius/sylius:${{ matrix.sylius }}" --no-update --no-scripts --no-interaction

            -
                name: Update Webpack version
                if: matrix.sylius == '~2.0.0'
                run: composer require "symfony/webpack-encore-bundle:^2.0" --no-update --no-scripts --no-interaction
            -
                name: Remove FOS OAuth Server
                if: matrix.sylius != '~1.11.0'
                run: composer remove "friendsofsymfony/oauth-server-bundle" --dev --no-update --no-scripts --no-interaction
            -
                name: Install PHP dependencies
                run: composer install --no-interaction

#            -
#                name: Get Yarn cache directory
#                id: yarn-cache
#                run: echo "::set-output name=dir::$(yarn cache dir)"
#
#            -
#                name: Cache Yarn
#                uses: actions/cache@v2
#                with:
#                    path: ${{ steps.yarn-cache.outputs.dir }}
#                    key: ${{ runner.os }}-node-${{ matrix.node }}-yarn-${{ hashFiles('**/package.json **/yarn.lock') }}
#                    restore-keys: |
#                        ${{ runner.os }}-node-${{ matrix.node }}-yarn-
#
#            -
#                name: Install JS dependencies
#                run: (cd tests/Application && yarn install)

            -
                name: Prepare test application database
                run: |
                    (cd tests/Application && bin/console doctrine:database:create -vvv)
                    (cd tests/Application && bin/console doctrine:schema:create -vvv)

#            -
#                name: Prepare test application assets
#                run: |
#                    (cd tests/Application && bin/console assets:install public -vvv)
#                    (cd tests/Application && yarn build)

            -
                name: Prepare test application cache
                run: (cd tests/Application && bin/console cache:warmup -vvv)

            -
                name: Load fixtures in test application
                run: (cd tests/Application && bin/console sylius:fixtures:load -n)

            -
                name: Validate composer.json
                run: composer validate --ansi --strict

            -
                name: Validate database schema
                run: (cd tests/Application && bin/console doctrine:schema:validate)

            -
                name: Run PHPStan
                run: vendor/bin/phpstan analyse -c phpstan.neon -l max src/

            -
                name: Run Psalm
                run: vendor/bin/psalm

#            -
#                name: Run PHPSpec
#                run: vendor/bin/phpspec run --ansi -f progress --no-interaction

            -
                name: Run PHPUnit
                run: vendor/bin/phpunit --colors=always

#            -
#                name: Run Behat
#                run: vendor/bin/behat --colors --strict -vvv --no-interaction || vendor/bin/behat --colors --strict -vvv --no-interaction --rerun
#
#            -
#                name: Upload Behat logs
#                uses: actions/upload-artifact@v2
#                if: failure()
#                with:
#                    name: Behat logs
#                    path: etc/build/
#                    if-no-files-found: ignore
